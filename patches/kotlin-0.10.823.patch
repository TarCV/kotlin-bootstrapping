diff --git a/build.xml b/build.xml
index b640140f6c7..c1160e020a4 100644
--- a/build.xml
+++ b/build.xml
@@ -833,7 +833,7 @@
             depends="builtins,stdlib,reflection,reflection-stub,pack-runtime,pack-runtime-sources"/>
 
     <target name="dist"
-            depends="clean,init,prepare-dist,preloader,serialize-builtins,compiler,compiler-sources,ant-tools,jdk-annotations,android-sdk-annotations,runtime,kotlin-js-stdlib"
+            depends="clean,init,prepare-dist,preloader,serialize-builtins,compiler,compiler-sources,ant-tools,jdk-annotations,runtime"
             description="Builds redistributables from sources"/>
 
     <target name="dist-quick"
diff --git a/libraries/stdlib/src/kotlin/io/ReadWrite.kt b/libraries/stdlib/src/kotlin/io/ReadWrite.kt
index 8ade32eea1b..7aeb2e348d9 100644
--- a/libraries/stdlib/src/kotlin/io/ReadWrite.kt
+++ b/libraries/stdlib/src/kotlin/io/ReadWrite.kt
@@ -153,7 +153,7 @@ public fun Writer.buffered(bufferSize: Int = defaultBufferSize): BufferedWriter
 public fun Reader.forEachLine(block: (String) -> Unit): Unit = useLines { lines -> lines.forEach(block) }
 
 public inline fun <T> Reader.useLines(block: (Stream<String>) -> T): T =
-        this.buffered().use { block(it.lines()) }
+        this.buffered().use { block(it.lineSequence()) }
 
 /**
  * Returns an iterator over each line.
@@ -163,10 +163,10 @@ public inline fun <T> Reader.useLines(block: (Stream<String>) -> T): T =
  * <br>
  * We suggest you try the method useLines() instead which closes the stream when the processing is complete.
  */
-public fun BufferedReader.lines(): Stream<String> = LinesStream(this)
+public fun BufferedReader.lineSequence(): Stream<String> = LinesStream(this)
 
 deprecated("Use lines() function which returns Stream<String>")
-public fun BufferedReader.lineIterator(): Iterator<String> = lines().iterator()
+public fun BufferedReader.lineIterator(): Iterator<String> = lineSequence().iterator()
 
 private class LinesStream(private val reader: BufferedReader) : Stream<String> {
     override fun iterator(): Iterator<String> {
--- a/compiler/backend/src/org/jetbrains/kotlin/codegen/ImplementationBodyCodegen.java
+++ b/compiler/backend/src/org/jetbrains/kotlin/codegen/ImplementationBodyCodegen.java
@@ -670,7 +670,7 @@ private Type genPropertyOnStack(InstructionAdapter iv, MethodContext context, PropertyDescriptor propertyDescriptor, int index) {
                 Type type = typeMapper.mapType(propertyDescriptor.getType());
                 String fieldName = ((FieldOwnerContext) context.getParentContext()).getFieldName(propertyDescriptor, false);
                 iv.getfield(classAsmType.getInternalName(), fieldName, type.getDescriptor());
-                return type.getReturnType();
+                String descriptor = type.getDescriptor(); if (descriptor.contains(")")) { throw new IllegalStateException(descriptor); } else { return Type.getType(descriptor); }
             }
             else {
                 //noinspection ConstantConditions
