diff --git a/build.xml b/build.xml
index cf640ec135ef..774e089201af 100644
--- a/build.xml
+++ b/build.xml
@@ -1,6 +1,8 @@
 <project name="IntelliJ IDEA Community Edition" default="all">
   <property name="project.home" value="${basedir}"/>
   <property name="out.dir" value="${project.home}/out"/>
+  <property name="dist.dir" value="__STUB__"/>
+  <property name="ant-launcher.jar" value="__STUB__"/>
   <property name="tmp.dir" value="${project.home}/out/tmp"/>
 
   <target name="cleanup">
@@ -16,8 +16,8 @@
   <macrodef name="call_gant">
     <attribute name="script" />
     <sequential>
-      <java failonerror="true" jar="${project.home}/lib/ant/lib/ant-launcher.jar" fork="true">
+      <java failonerror="true" jar="${ant-launcher.jar}" fork="true">
-        <jvmarg line="-Xmx612m -XX:MaxPermSize=152m"/>
+        <jvmarg line="-Xmx4096M"/>
 
         <arg line="&quot;-Dgant.script=@{script}&quot;"/>
         <arg line="&quot;-Dteamcity.build.tempDir=${tmp.dir}&quot;"/>
@@ -36,4 +34,11 @@
   </target>
 
   <target name="all" depends="cleanup,build"/>
+  <target name="install" depends="build">
+    <copy todir="${dist.dir}">
+      <fileset dir="${out.dir}">
+        <include name="**/artifacts/core/intellij-core.jar" />
+      </fileset>
+    </copy>
+  </target>
 </project>
diff --git a/java/java-psi-impl/src/com/intellij/psi/impl/compiled/StubBuildingVisitor.java b/java/java-psi-impl/src/com/intellij/psi/impl/compiled/StubBuildingVisitor.java
index d65a00d165de..56b7ab22ec95 100644
--- a/java/java-psi-impl/src/com/intellij/psi/impl/compiled/StubBuildingVisitor.java
+++ b/java/java-psi-impl/src/com/intellij/psi/impl/compiled/StubBuildingVisitor.java
@@ -67,6 +67,10 @@ public class StubBuildingVisitor<T> extends ClassVisitor {
   private PsiClassStub myResult;
   private PsiModifierListStub myModList;
 
+  public StubBuildingVisitor(T classSource, InnerClassSourceStrategy<T> innersStrategy, StubElement parent, int access) {
+    this(classSource, innersStrategy, parent, access, null);
+  }
+
   public StubBuildingVisitor(T classSource, InnerClassSourceStrategy<T> innersStrategy, StubElement parent, int access, String shortName) {
     super(Opcodes.ASM4);
     mySource = classSource;
--- a/platform/util/src/com/intellij/util/containers/ConcurrentHashMap.java
+++ b/platform/util/src/com/intellij/util/containers/ConcurrentHashMap.java
@@ -19,8 +19,8 @@
 import com.intellij.util.ConcurrencyUtil;
 import com.intellij.util.IncorrectOperationException;
 import gnu.trove.TObjectHashingStrategy;
-import jsr166e.CountedCompleter;
-import jsr166e.ForkJoinPool;
+import java.util.concurrent.CountedCompleter;
+import java.util.concurrent.ForkJoinPool;
 import org.jetbrains.annotations.NotNull;
 import sun.misc.Unsafe;

--- a/platform/util/src/com/intellij/util/ui/IsRetina.java
+++ b/platform/util/src/com/intellij/util/ui/IsRetina.java
@@ -15,25 +15,11 @@
  */
 package com.intellij.util.ui;

-import apple.awt.CImage;

 import java.awt.image.BufferedImage;

 class IsRetina {
   public static boolean isRetina() {
-    try {
-      final boolean[] isRetina = new boolean[1];
-      new CImage.HiDPIScaledImage(1, 1, BufferedImage.TYPE_INT_ARGB) {
-        @Override
-        public void drawIntoImage(BufferedImage image, float v) {
-          isRetina[0] = v > 1;
-        }
-      };
-      return isRetina[0];
-    }
-    catch (Throwable e) {
-      e.printStackTrace();
       return false;
-    }
   }
 }
--- a/platform/util/src/com/intellij/util/text/DateFormatUtil.java
+++ b/platform/util/src/com/intellij/util/text/DateFormatUtil.java
@@ -19,8 +19,6 @@
 import com.intellij.openapi.diagnostic.Logger;
 import com.intellij.openapi.util.Clock;
 import com.intellij.openapi.util.SystemInfo;
-import com.intellij.ui.mac.foundation.Foundation;
-import com.intellij.ui.mac.foundation.ID;
 import org.jetbrains.annotations.NotNull;

 import java.text.DateFormat;
@@ -330,142 +328,14 @@
     }
   }

   @NotNull
   static String getMacTimeFormat(final int type, @NotNull final DateType dateType) {
+    throw new UnsupportedOperationException();
-    final ID autoReleasePool = Foundation.invoke("NSAutoreleasePool", "new");
-    try {
-      final ID dateFormatter = Foundation.invoke("NSDateFormatter", "new");
-      Foundation.invoke(dateFormatter, Foundation.createSelector("setFormatterBehavior:"), MacFormatterBehavior_10_4);
-
-      int style;
-      switch (type) {
-        case DateFormat.SHORT:
-          style = MacFormatterShortStyle;
-          break;
-        case DateFormat.MEDIUM:
-          style = MacFormatterMediumStyle;
-          break;
-        case DateFormat.LONG:
-          style = MacFormatterLongStyle;
-          break;
-        case DateFormat.FULL:
-        default:
-          style = MacFormatterFullStyle;
-          break;
-      }
-
-      int timeStyle;
-      int dateStyle;
-      switch (dateType) {
-        case DATE:
-          timeStyle = MacFormatterNoStyle;
-          dateStyle = style;
-          break;
-        case TIME:
-          timeStyle = style;
-          dateStyle = MacFormatterNoStyle;
-          break;
-        case DATETIME:
-        default:
-          timeStyle = style;
-          dateStyle = style;
-          break;
-      }
-
-      Foundation.invoke(dateFormatter, Foundation.createSelector("setTimeStyle:"), timeStyle);
-      Foundation.invoke(dateFormatter, Foundation.createSelector("setDateStyle:"), dateStyle);
-      String format = Foundation.toStringViaUTF8(Foundation.invoke(dateFormatter, Foundation.createSelector("dateFormat")));
-      assert format != null;
-      return format;
-    }
-    finally {
-      Foundation.invoke(autoReleasePool, Foundation.createSelector("release"));
-    }
   }

   @NotNull
   static String convertMacPattern(@NotNull String macPattern) {
+    throw new UnsupportedOperationException();
-    StringBuilder b = new StringBuilder();
-    boolean isSpecial = false;
-    boolean isText = false;
-
-    for (int i = 0; i < macPattern.length(); i++) {
-      char c = macPattern.charAt(i);
-      if (isSpecial) {
-        String replacement = null;
-        if (c == '%') replacement = "$";
-
-        // year
-        if (c == 'y') replacement = "yy";
-        if (c == 'Y') replacement = "yyyy";
-
-        // month
-        if (c == 'm') replacement = "MM";
-        if (c == 'b') replacement = "MMM";
-        if (c == 'B') replacement = "MMMMM";
-
-        // day on month
-        if (c == 'e') replacement = "d";
-        if (c == 'd') replacement = "dd";
-
-        // day of year
-        if (c == 'j') replacement = "DDD";
-
-        // day of week
-        if (c == 'w') replacement = "E"; // SimpleDateFormat doesn't support formatting weekday as a number
-        if (c == 'a') replacement = "EEE";
-        if (c == 'A') replacement = "EEEEE";
-
-        // hours
-        if (c == 'H') replacement = "HH"; // 0-24
-        //if (c == 'H') replacement = "k"; // 1-24
-        //if (c == 'I') replacement = "K"; // 0-11
-        if (c == 'I') replacement = "hh"; // 1-12
-
-        //minute
-        if (c == 'M') replacement = "mm";
-        //second
-        if (c == 'S') replacement = "ss";
-        //millisecond
-        if (c == 'F') replacement = "SSS";
-
-        //millisecond
-        if (c == 'p') replacement = "a";
-
-        //millisecond
-        if (c == 'Z') replacement = "zzz";
-        //millisecond
-        if (c == 'z') replacement = "Z";
-
-
-        //todo if (c == 'c') replacement = "MMMMM";, x, X
-
-        if (replacement == null) replacement = "'?%" + c + "?'";
-
-        b.append(replacement);
-        isSpecial = false;
-      }
-      else {
-        isSpecial = c == '%';
-        if (isSpecial) {
-          isText = false;
-        }
-        else {
-          if (isText) {
-            if (c == '\'' || Character.isWhitespace(c)) b.append('\'');
-            isText = !Character.isWhitespace(c);
-          }
-          else {
-            if (c == '\'' || !Character.isWhitespace(c)) b.append('\'');
-            isText = !Character.isWhitespace(c) && c != '\'';
-          }
-          b.append(c);
-
-          if (isText && i == macPattern.length() - 1) b.append('\'');
-        }
-      }
-    }
-    return b.toString();
   }

   @NotNull
--- a/platform/util/src/com/intellij/util/RetinaImage.java
+++ b/platform/util/src/com/intellij/util/RetinaImage.java
@@ -48,9 +48,7 @@


   private static BufferedImage create(Image image, final int width, int height, int type) {
-    if (SystemInfo.isAppleJvm) {
-      return AppleHiDPIScaledImage.create(width, height, type);
-    } else {
+    {
       if (image == null) {
         return new JBHiDPIScaledImage(width, height, type);
       } else {
@@ -60,6 +58,6 @@
   }

   public static boolean isAppleHiDPIScaledImage(Image image) {
-    return UIUtil.isAppleRetina() && AppleHiDPIScaledImage.is(image);
+    return false;
   }
 }
--- a/platform/util/src/com/intellij/util/ui/UIUtil.java
+++ b/platform/util/src/com/intellij/util/ui/UIUtil.java
@@ -113,8 +113,7 @@
   }

   public static Cursor getTextCursor(final Color backgroundColor) {
-    return SystemInfo.isMac && ColorUtil.isDark(backgroundColor) ?
-           MacUIUtil.getInvertedTextCursor() : Cursor.getPredefinedCursor(Cursor.TEXT_CURSOR);
+    return Cursor.getPredefinedCursor(Cursor.TEXT_CURSOR);
   }

   /**
--- a/platform/util/src/com/intellij/openapi/util/JDOMUtil.java
+++ b/platform/util/src/com/intellij/openapi/util/JDOMUtil.java
@@ -105,8 +105,8 @@
   private static int addToHash(int i, @NotNull final Element element) {
     i = addToHash(i, element.getName());

-    for (Attribute aList : element.getAttributes()) {
-      i = addToHash(i, aList);
+    for (Object aList : element.getAttributes()) {
+      i = addToHash(i, (Attribute) aList);
     }

     List<Content> content = element.getContent();
@@ -178,12 +178,13 @@
   public static void internElement(@NotNull Element element, @NotNull StringInterner interner) {
     element.setName(intern(interner, element.getName()));

-    for (Attribute attr : element.getAttributes()) {
+    for (Object attrTmp : element.getAttributes()) {
+      Attribute attr = (Attribute) attrTmp;
       attr.setName(intern(interner, attr.getName()));
       attr.setValue(intern(interner, attr.getValue()));
     }

-    for (Content o : element.getContent()) {
+    for (Object o : element.getContent()) {
       if (o instanceof Element) {
         Element e = (Element)o;
         internElement(e, interner);
@@ -746,17 +747,18 @@
     if (!attributes.isEmpty()) {
       ArrayList<Attribute> list = new ArrayList<Attribute>(attributes.size());
       for (Attribute attribute : attributes) {
-        list.add(attribute.clone());
+        list.add((Attribute) attribute.clone());
       }
       result.setAttributes(list);
     }

-    for (Namespace namespace : element.getAdditionalNamespaces()) {
-      result.addNamespaceDeclaration(namespace);
+    for (Object namespace : element.getAdditionalNamespaces()) {
+      result.addNamespaceDeclaration((Namespace) namespace);
     }

     boolean hasContent = false;
-    for (Content content : element.getContent()) {
+    for (Object contentTmp : element.getContent()) {
+      Content content = (Content) contentTmp;
       if (content instanceof Element) {
         if (elementFilter.matches(content)) {
           hasContent = true;
@@ -765,7 +768,7 @@
           continue;
         }
       }
-      result.addContent(content.clone());
+      result.addContent((Content) content.clone());
     }
     return hasContent ? result : null;
   }
--- a/platform/util/src/com/intellij/util/containers/OrderedSet.java
+++ b/platform/util/src/com/intellij/util/containers/OrderedSet.java
@@ -21,6 +21,10 @@
 import java.util.*;

 public class OrderedSet<T> extends AbstractList<T> implements Set<T>, RandomAccess {
+  @Override
+  public Spliterator<T> spliterator() {
+      return myElements.spliterator();
+  }
   private final OpenTHashSet<T> myHashSet;
   private final ArrayList<T> myElements;

--- a/platform/util/src/com/intellij/util/xmlb/JDOMXIncluder.java
+++ b/platform/util/src/com/intellij/util/xmlb/JDOMXIncluder.java
@@ -54,7 +54,7 @@
       throw new NullPointerException("Document must not be null");
     }

-    Document result = original.clone();
+    Document result = (Document)original.clone();

     Element root = result.getRootElement();
     List<Content> resolved = resolve(root, base);
@@ -330,10 +330,11 @@
     Iterator<Attribute> attributes = original.getAttributes().iterator();
     while (attributes.hasNext()) {
       Attribute a = attributes.next();
-      result.setAttribute(a.clone());
+      result.setAttribute((Attribute)a.clone());
     }

-    for (Content o : original.getContent())  {
+    for (Object oTmp : original.getContent())  {
+      Content o = (Content)oTmp;
       if (o instanceof Element) {
         Element element = (Element)o;
         if (isIncludeElement(element)) {
@@ -344,6 +345,6 @@
         }
       }
       else {
-        result.addContent(o.clone());
+        result.addContent((Content)o.clone());
       }
     } // end while
--- a/java/compiler/javac2/src/com/intellij/ant/Javac2.java
+++ b/java/compiler/javac2/src/com/intellij/ant/Javac2.java
@@ -18,9 +18,6 @@
 import com.intellij.compiler.instrumentation.InstrumentationClassFinder;
 import com.intellij.compiler.instrumentation.InstrumenterClassWriter;
 import com.intellij.compiler.notNullVerification.NotNullVerifyingInstrumenter;
-import com.intellij.uiDesigner.compiler.*;
-import com.intellij.uiDesigner.lw.CompiledClassPropertiesProvider;
-import com.intellij.uiDesigner.lw.LwRootContainer;
 import org.apache.tools.ant.BuildException;
 import org.apache.tools.ant.Project;
 import org.apache.tools.ant.taskdefs.Javac;
@@ -243,93 +240,7 @@
    * @param finder a classloader to use
    */
   private void instrumentForms(final InstrumentationClassFinder finder) {
     // we instrument every file, because we cannot find which files should not be instrumented without dependency storage
     final ArrayList formsToInstrument = myFormFiles;

     if (formsToInstrument.size() == 0) {
       log("No forms to instrument found", Project.MSG_VERBOSE);
       return;
     }
+    fireError("Form instrumentation is not supported. Found forms: " + formsToInstrument);
-
-    final HashMap class2form = new HashMap();
-
-    for (int i = 0; i < formsToInstrument.size(); i++) {
-      final File formFile = (File)formsToInstrument.get(i);
-
-      log("compiling form " + formFile.getAbsolutePath(), Project.MSG_VERBOSE);
-      final LwRootContainer rootContainer;
-      try {
-        rootContainer = Utils.getRootContainer(formFile.toURI().toURL(), new CompiledClassPropertiesProvider(finder.getLoader()));
-      }
-      catch (AlienFormFileException e) {
-        // ignore non-IDEA forms
-        continue;
-      }
-      catch (Exception e) {
-        fireError("Cannot process form file " + formFile.getAbsolutePath() + ". Reason: " + e);
-        continue;
-      }
-
-      final String classToBind = rootContainer.getClassToBind();
-      if (classToBind == null) {
-        continue;
-      }
-
-      String name = classToBind.replace('.', '/');
-      File classFile = getClassFile(name);
-      if (classFile == null) {
-        log(formFile.getAbsolutePath() + ": Class to bind does not exist: " + classToBind, Project.MSG_WARN);
-        continue;
-      }
-
-      final File alreadyProcessedForm = (File)class2form.get(classToBind);
-      if (alreadyProcessedForm != null) {
-        fireError(formFile.getAbsolutePath() +
-                  ": " +
-                  "The form is bound to the class " +
-                  classToBind +
-                  ".\n" +
-                  "Another form " +
-                  alreadyProcessedForm.getAbsolutePath() +
-                  " is also bound to this class.");
-        continue;
-      }
-      class2form.put(classToBind, formFile);
-
-      try {
-        int version;
-        InputStream stream = new FileInputStream(classFile);
-        try {
-          version = getClassFileVersion(new ClassReader(stream));
-        }
-        finally {
-          stream.close();
-        }
-        AntNestedFormLoader formLoader = new AntNestedFormLoader(finder.getLoader(), myNestedFormPathList);
-        InstrumenterClassWriter classWriter = new InstrumenterClassWriter(getAsmClassWriterFlags(version), finder);
-        final AsmCodeGenerator codeGenerator = new AsmCodeGenerator(rootContainer, finder, formLoader, false, classWriter);
-        codeGenerator.patchFile(classFile);
-        final FormErrorInfo[] warnings = codeGenerator.getWarnings();
-
-        for (int j = 0; j < warnings.length; j++) {
-          log(formFile.getAbsolutePath() + ": " + warnings[j].getErrorMessage(), Project.MSG_WARN);
-        }
-        final FormErrorInfo[] errors = codeGenerator.getErrors();
-        if (errors.length > 0) {
-          StringBuffer message = new StringBuffer();
-          for (int j = 0; j < errors.length; j++) {
-            if (message.length() > 0) {
-              message.append("\n");
-            }
-            message.append(formFile.getAbsolutePath()).append(": ").append(errors[j].getErrorMessage());
-          }
-          fireError(message.toString());
-        }
-      }
-      catch (Exception e) {
-        fireError("Forms instrumentation failed for " + formFile.getAbsolutePath() + ": " + e.toString());
-      }
-    }
   }

   /**
@@ -520,59 +431,4 @@
     return new InstrumentationClassFinder(urlsArr);
   }

-  private class AntNestedFormLoader implements NestedFormLoader {
-    private final ClassLoader myLoader;
-    private final List myNestedFormPathList;
-    private final HashMap myFormCache = new HashMap();
-
-    public AntNestedFormLoader(final ClassLoader loader, List nestedFormPathList) {
-      myLoader = loader;
-      myNestedFormPathList = nestedFormPathList;
-    }
-
-    public LwRootContainer loadForm(String formFilePath) throws Exception {
-      if (myFormCache.containsKey(formFilePath)) {
-        return (LwRootContainer)myFormCache.get(formFilePath);
-      }
-
-      String lowerFormFilePath = formFilePath.toLowerCase();
-      log("Searching for form " + lowerFormFilePath, Project.MSG_VERBOSE);
-      for (Iterator iterator = myFormFiles.iterator(); iterator.hasNext();) {
-        File file = (File)iterator.next();
-        String name = file.getAbsolutePath().replace(File.separatorChar, '/').toLowerCase();
-        log("Comparing with " + name, Project.MSG_VERBOSE);
-        if (name.endsWith(lowerFormFilePath)) {
-          return loadForm(formFilePath, new FileInputStream(file));
-        }
-      }
-
-      if (myNestedFormPathList != null) {
-        for (int i = 0; i < myNestedFormPathList.size(); i++) {
-          PrefixedPath path = (PrefixedPath)myNestedFormPathList.get(i);
-          File formFile = path.findFile(formFilePath);
-          if (formFile != null) {
-            return loadForm(formFilePath, new FileInputStream(formFile));
-          }
-        }
-      }
-      InputStream resourceStream = myLoader.getResourceAsStream(formFilePath);
-      if (resourceStream != null) {
-        return loadForm(formFilePath, resourceStream);
-      }
-      throw new Exception("Cannot find nested form file " + formFilePath);
-    }
-
-    private LwRootContainer loadForm(String formFileName, InputStream resourceStream) throws Exception {
-      final LwRootContainer container = Utils.getRootContainer(resourceStream, null);
-      myFormCache.put(formFileName, container);
-      return container;
-    }
-
-    public String getClassToBindName(LwRootContainer container) {
-      final String className = container.getClassToBind();
-      String result = getClassOrInnerName(className.replace('.', '/'));
-      if (result != null) return result.replace('/', '.');
-      return className;
-    }
-  }
 }
