diff --git a/build.xml b/build.xml
index 455ce077218..fce434fb729 100644
--- a/build.xml
+++ b/build.xml
@@ -584,6 +584,6 @@
     <!-- builds redistributables from sources -->
     <target name="dist"
-            depends="clean,init,prepareDist,preloader,compiler,compilerSources,antTools,jdkAnnotations,androidSdkAnnotations,annotationsExt,runtime,runtime_sources,jslib,j2kConverter"/>
+            depends="clean,init,prepareDist,preloader,compiler,compilerSources,antTools,jdkAnnotations,androidSdkAnnotations,annotationsExt,runtime,runtime_sources,j2kConverter"/>

     <!-- builds everything, but classes are reused from project out dir, doesn't run proguard and javadoc -->
     <target name="dist_quick"
--- a/build-tools/ant/src/org/jetbrains/jet/buildtools/ant/KotlinCompilerAdapter.java
+++ b/build-tools/ant/src/org/jetbrains/jet/buildtools/ant/KotlinCompilerAdapter.java
@@ -29,6 +29,7 @@
         BytecodeCompilerTask kotlinTask = new BytecodeCompilerTask();
         kotlinTask.setOutput(javac.getDestdir());
         kotlinTask.setClasspath(javac.getClasspath());
+        org.jetbrains.jet.utils.PathUtil.setRtJar(javac.getBootclasspath().toString());
         kotlinTask.setSrc(javac.getSrcdir());

         kotlinTask.execute();
--- a/compiler/util/src/org/jetbrains/jet/utils/PathUtil.java
+++ b/compiler/util/src/org/jetbrains/jet/utils/PathUtil.java
@@ -40,5 +40,7 @@
     private static final File NO_PATH = new File("<no_path>");
+    private static String rtJarPath = null;
+    public static synchronized void setRtJar(String path) { rtJarPath = path; }

     private PathUtil() {}

     @NotNull
@@ -150,8 +152,10 @@
     }

     @NotNull
-    public static File findRtJar() {
+    public static synchronized File findRtJar() {
+        if (rtJarPath != null) { return new File(rtJarPath); } else {
         return findRtJar(System.getProperty("java.home"));
+        }
     }

     private static File findRtJar(String javaHome) {
--- a/compiler/backend/src/org/jetbrains/jet/codegen/ExpressionCodegen.java
+++ b/compiler/backend/src/org/jetbrains/jet/codegen/ExpressionCodegen.java
@@ -181,7 +181,7 @@
     }

     protected InstructionAdapter createInstructionAdapter(MethodVisitor mv) {
-        return new InstructionAdapter(methodVisitor) {
+        return new InstructionAdapter(ASM4, methodVisitor) {
             @Override
             public void visitLocalVariable(String name, String desc, String signature, Label start, Label end, int index) {
                 super.visitLocalVariable(name, desc, signature, start, end, index);
