diff --git a/build.xml b/build.xml
index b72093b7739..298f7d05061 100644
--- a/build.xml
+++ b/build.xml
@@ -323,7 +323,7 @@
           <if>
             <istrue value="${bootstrap.build.no.tests}"/>
             <then>
-              <property name="compiler.manifest.class.path" value="."/>
+              <property name="compiler.manifest.class.path" value=""/>
             </then>
             <else>
               <property name="compiler.manifest.class.path" value="kotlin-runtime.jar"/>
@@ -625,7 +625,7 @@
 
     <!-- See description -->
     <target name="dist"
-            depends="clean,init,prepareDist,preloader,builtins,compiler,compilerSources,antTools,jdkAnnotations,androidSdkAnnotations,runtime,runtime_sources,jslib"
+            depends="clean,init,prepareDist,preloader,builtins,compiler,compilerSources,antTools,jdkAnnotations,runtime,runtime_sources"
             description="Builds redistributables from sources"/>
 
     <!-- builds everything, but classes are reused from project out dir, doesn't run proguard and javadoc -->
diff --git a/libraries/stdlib/src/kotlin/io/JIO.kt b/libraries/stdlib/src/kotlin/io/JIO.kt
index 42bb6d35618..3017699ee65 100644
--- a/libraries/stdlib/src/kotlin/io/JIO.kt
+++ b/libraries/stdlib/src/kotlin/io/JIO.kt
@@ -200,7 +200,7 @@ public fun Writer.buffered(bufferSize: Int = defaultBufferSize): BufferedWriter
 public fun Reader.forEachLine(block: (String) -> Unit): Unit = useLines { lines -> lines.forEach(block) }
 
 public inline fun <T> Reader.useLines([inlineOptions(ONLY_LOCAL_RETURN)] block: (Stream<String>) -> T): T =
-        this.buffered().use { block(it.lines()) }
+        this.buffered().use { block(it.lineSequence()) }
 
 /**
  * Returns an iterator over each line.
@@ -210,10 +210,10 @@ public inline fun <T> Reader.useLines([inlineOptions(ONLY_LOCAL_RETURN)] block:
  * <br>
  * We suggest you try the method useLines() instead which closes the stream when the processing is complete.
  */
-public fun BufferedReader.lines(): Stream<String> = LinesStream(this)
+public fun BufferedReader.lineSequence(): Stream<String> = LinesStream(this)
 
 deprecated("Use lines() function which returns Stream<String>")
-public fun BufferedReader.lineIterator(): Iterator<String> = lines().iterator()
+public fun BufferedReader.lineIterator(): Iterator<String> = lineSequence().iterator()
 
 class LinesStream(val reader: BufferedReader) : Stream<String> {
     override fun iterator(): Iterator<String> {
--- a/compiler/backend/src/org/jetbrains/jet/codegen/ImplementationBodyCodegen.java
+++ b/compiler/backend/src/org/jetbrains/jet/codegen/ImplementationBodyCodegen.java
@@ -807,7 +807,7 @@ private Type genPropertyOnStack(InstructionAdapter iv, MethodContext context, PropertyDescriptor propertyDescriptor, int index) {
                 Type type = typeMapper.mapType(propertyDescriptor.getType());
                 String fieldName = ((FieldOwnerContext) context.getParentContext()).getFieldName(propertyDescriptor, false);
                 iv.getfield(classAsmType.getInternalName(), fieldName, type.getDescriptor());
-                return type.getReturnType();
+                String descriptor = type.getDescriptor(); if (descriptor.contains(")")) { throw new IllegalStateException(descriptor); } else { return Type.getType(descriptor); }
             }
             else {
                 //noinspection ConstantConditions
