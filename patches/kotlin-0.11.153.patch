diff --git a/build.xml b/build.xml
index 9f02b21df15..f7acff69c94 100644
--- a/build.xml
+++ b/build.xml
@@ -33,13 +33,6 @@
     <property name="dependencies.dir" value="${basedir}/dependencies"/>

+    <property name="bootstrap.or.local.build" value="${bootstrap.build.no.tests}"/>
-    <condition property="bootstrap.or.local.build" value="true">
-        <or>
-            <istrue value="${bootstrap.build.no.tests}"/>
-            <not>
-                <isset property="teamcity.version"/>
-            </not>
-        </or>
-    </condition>

     <!--
     The compiler produced on the first step of the build (Bootstrap No Tests) is only guaranteed to work against the OLD runtime
@@ -877,7 +877,7 @@
             <jar-content>
                 <fileset dir="${output}/classes/reflection"/>
                 <fileset dir="${output}/classes/core"/>
-                <zipfileset src="${protobuf-lite.jar}"/>
-                <zipfileset src="${javax.inject.jar}"/>
+                <zipfileset src="${protobuf-lite.jar}" excludes="META-INF/INDEX.LIST"/><!-- In Guix all jars have the index -->
+                <zipfileset src="${javax.inject.jar}" excludes="META-INF/INDEX.LIST"/>
             </jar-content>
         </pack-runtime-jar>
@@ -911,7 +911,7 @@
             depends="builtins,stdlib,core,reflection,pack-runtime,pack-runtime-sources"/>
 
     <target name="dist"
-            depends="clean,init,prepare-dist,preloader,serialize-builtins,compiler,compiler-sources,ant-tools,jdk-annotations,android-sdk-annotations,runtime,kotlin-js-stdlib,android-compiler-plugin"
+            depends="clean,init,prepare-dist,preloader,serialize-builtins,compiler,compiler-sources,ant-tools,jdk-annotations,runtime,android-compiler-plugin"
             description="Builds redistributables from sources"/>
 
     <target name="dist-quick"
diff --git a/libraries/stdlib/src/kotlin/io/ReadWrite.kt b/libraries/stdlib/src/kotlin/io/ReadWrite.kt
index d441139b617..6cb7d9cc002 100644
--- a/libraries/stdlib/src/kotlin/io/ReadWrite.kt
+++ b/libraries/stdlib/src/kotlin/io/ReadWrite.kt
@@ -159,7 +159,7 @@ public fun Reader.forEachLine(block: (String) -> Unit): Unit = useLines { lines
  * @return the value returned by [block].
  */
 public inline fun <T> Reader.useLines(block: (Sequence<String>) -> T): T =
-        this.buffered().use { block(it.lines()) }
+        this.buffered().use { block(it.lineSequence()) }
 
 /**
  * Returns an iterator over each line.
@@ -169,10 +169,10 @@ public inline fun <T> Reader.useLines(block: (Sequence<String>) -> T): T =
  *
  * We suggest you try the method [useLines] instead which closes the stream when the processing is complete.
  */
-public fun BufferedReader.lines(): Sequence<String> = LinesStream(this)
+public fun BufferedReader.lineSequence(): Sequence<String> = LinesStream(this)
 
 deprecated("Use lines() function which returns Stream<String>")
-public fun BufferedReader.lineIterator(): Iterator<String> = lines().iterator()
+public fun BufferedReader.lineIterator(): Iterator<String> = lineSequence().iterator()
 
 private class LinesStream(private val reader: BufferedReader) : Sequence<String> {
     override fun iterator(): Iterator<String> {
--- a/compiler/backend/src/org/jetbrains/kotlin/codegen/ImplementationBodyCodegen.java
+++ b/compiler/backend/src/org/jetbrains/kotlin/codegen/ImplementationBodyCodegen.java
@@ -677,7 +677,7 @@ private Type genPropertyOnStack(InstructionAdapter iv, MethodContext context, PropertyDescriptor propertyDescriptor, int index) {
                 Type type = typeMapper.mapType(propertyDescriptor.getType());
                 String fieldName = ((FieldOwnerContext) context.getParentContext()).getFieldName(propertyDescriptor, false);
                 iv.getfield(classAsmType.getInternalName(), fieldName, type.getDescriptor());
-                return type.getReturnType();
+                String descriptor = type.getDescriptor(); if (descriptor.contains(")")) { throw new IllegalStateException(descriptor); } else { return Type.getType(descriptor); }
             }
             else {
                 //noinspection ConstantConditions
